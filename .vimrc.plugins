
" NeoBunle Settings ------------- {{{
"filetype off
"if has("win32") || has("win64")
"	set rtp+=~/.vim/bundle/vundle/
"	call vundle#rc('~/vimfiles/bundle')
"else
"	set rtp+=~/.vim/bundle/vundle
"	call vundle#rc()
"endif

if has('vim_starting')
    set nocompatible               " Be iMproved
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

" Vundle managed plugins
NeoBundle 'gmarik/vundle'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'Shougo/vimshell.vim'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'mileszs/ack.vim'
NeoBundle 'vim-scripts/sh.vim'
NeoBundle 'tpope/vim-surround'
NeoBundle 'thinca/vim-qfreplace'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'a.vim'
NeoBundle 'cocoa.vim'
NeoBundle 'taglist.vim'
NeoBundle 'sudo.vim'
NeoBundle 'EnhCommentify.vim'
NeoBundle 'vim-scripts/camelcasemotion'
" NeoBundle 'Shougo/neocomplcache.git'
NeoBundle 'osyo-manga/vim-over'
if has("unix")
	let s:uname = system("uname")
	if s:uname == "Darwin\n"
		NeoBundle 'thinca/vim-fontzoom'
		NeoBundle 'vim-jp/vimdoc-ja'
		NeoBundle 'keith/swift.vim'
		NeoBundle 'toyamarinyon/vim-swift'
        NeoBundle 'thinca/vim-ref'
        NeoBundle 'ryanolsonx/vim-lsp-swift'
    elseif s:uname == "Linux\n"
		NeoBundle 'Shougo/neosnippet.vim'
		NeoBundle 'Shougo/neosnippet-snippets'
	endif
" For JavaScript
"NeoBundle 'marijnh/tern_for_vim'
" Installした後に npm install する必要がある
endif

" for html
NeoBundle 'mattn/emmet-vim'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'pangloss/vim-javascript'

" For Java
NeoBundle 'artur-shaik/vim-javacomplete2'
NeoBundle 'vim-scripts/TagHighlight'
NeoBundle 'kamichidu/vim-unite-javaimport', {
            \ 'depends' :[
            \ 'kamichidu/vim-javaclasspath',
            \],
            \}

" for vimscript-help
NeoBundle 'mattn/learn-vimscript.git'

" for PHP
" NeoBundle 'joonty/vdebug'

" for Markdown
NeoBundle 'tpope/vim-markdown'
NeoBundle 'h1mesuke/vim-alignta'
NeoBundle 'kannokanno/previm'

" for plantuml
NeoBundle 'aklt/plantuml-syntax'

" for cpp
NeoBundle 'kana/vim-altr'
" LSP For C++ 
NeoBundle 'prabirshrestha/async.vim'
NeoBundle 'prabirshrestha/vim-lsp'
NeoBundle 'prabirshrestha/asyncomplete.vim'
NeoBundle 'prabirshrestha/asyncomplete-lsp.vim'

" for kotlin
NeoBundle 'udalov/kotlin-vim'

" for SQL
NeoBundle 'vim-scripts/SQLUtilities'
NeoBundle 'vim-scripts/Align'

" NeoBundle 'k28/evervim'
NeoBundle 'glidenote/memolist.vim'
" github NeoBundle 'name/foo.vim'
" www.vim.org NeoBundle 'bar.vim'
" C# settings
if has("win32") || has("win64")
    NeoBundle 'nosami/Omnisharp', {
                \       'autoload' : {'filetypes' : ['cs']},
                \       'build' : {
                \           'windows' : 'MSBuild.exe server/OmuniSharp.sln /p:Platform="Any CPU"',
                \       }
                \   }
endif

" for Gauche
NeoBundle 'aharisu/vim_goshrepl'

" for status line
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'

call neobundle#end()
filetype plugin indent on
NeoBundleCheck

" ----- Vundle Settings End ----- }}}

" Plugin settings {{{

" netrw.vim
" always tree style
let g:netrw_liststyle = 3
" do not show .files
"let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
" Set vertical window size to 75%
let g:netrw_size=75

" syntax highlite
if !exists("g:syntax_on")
	syntax enable
endif

let java_highlight_all = 1
let java_highlight_functions = "style"
let java_allow_cpp_keywords = 1

" a.vim addition
let g:alternateExtensions_h = "c,cpp,cxx,cc,CC,m,mm"
let g:alternateExtensions_m = "h"
let g:alternateExtensions_mm = "h,hpp"
let g:alternateExtensions_c = "h"
let g:alternateExtensions_cc = "h,hpp"
let g:alternateExtensions_cpp = "h,hpp"
let g:alternateExtensions_cxx = "h,hpp"

" vim-quickrun option
let g:quickrun_config={'*': {'split': ''}}
set splitright

" unite.vim settings
nnoremap <silent> ;; :OpenFileSearchCom<CR>
"noremap ;; :Unite buffer<CR>
"noremap ;; :Unite -start-insert eclipseSrcFiles<CR>
command! -nargs=* OpenFileSearchCom call <SID>OpenFileSearch()
function! s:OpenFileSearch()
    if &filetype == "java"
        :Unite -start-insert eclipseSrcFiles
    elseif &filetype == "objc" || &filetype == "objcpp"
        :Unite -start-insert cocoaSrcFiles
    elseif &filetype == "cpp" || &filetype == "c"
        :Unite -start-insert cppSrcFiles
    else
        :Unite buffer
    endif
endfunction

" EnhCommentify settings
function! EnhCommentifyCallback(ft)
	if a:ft == 'objc'
		let b:ECcommentOpen = '//'
		let b:ECcommentClose = ''
	endif
endfunction
let g:EnhCommentifyCallbackExists = 'Yes'

let g:clang_complete_getopts_ios_sdk_directory = '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.2.sdk/'
let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib'

" for vimfiler plugin
command! -nargs=0 OpenVimfilerAsIDE :VimFiler -split -simple -winwidth=35 -no-quit

" for taglist plugin
let Tlist_Ctags_Cmd = "$HOME/bin/ctags"
let Tlist_Show_One_File = 1
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1
nnoremap <silent> <leader>l :TlistToggle<CR>
let tlist_objc_settings = 'objc;P:protocols;i:interfaces;I:implementations;M:instance methods;C:implementation methods;Z:protocol methods'

" for vdebug
    let g:vdebug_options= {
    \    "port" : 9000,
    \    "server" : '',
    \    "timeout" : 30,
    \    "on_close" : 'detach',
    \    "break_on_open" : 0,
    \    "continuous_mode" : 1,
    \    "ide_key" : '',
    \    "path_maps" : {},
    \    "debug_window_level" : 0,
    \    "debug_file_level" : 0,
    \    "debug_file" : "",
    \    "watch_window_style" : 'expanded',
    \    "marker_default" : '⬦',
    \    "marker_closed_tree" : '▸',
    \    "marker_open_tree" : '▾'
    \}
 
" for Dumbbuf plugin
let g:dumbbuf_hotkey=''

" ctrlp settings
let g:ctrlp_use_migemo = 1
let g:ctrlp_clear_cache_on_exit = 1   " 終了時キャッシュをクリアする
let g:ctrlp_mruf_max            = 500 " MRUの最大記録数
let g:ctrlp_open_new_file       = 1   " 新規ファイル作成時にタブで開く
let g:ctrlp_switch_buffer       = 0   " すでに開かれている時にもその場所で開く
let g:ctrlp_regexp = 1 " regexp mode

" neocomplcache plugin
" if !exists('g:neocomplcache_force_omni_patterns')
" 	let g:neocomplcache_force_omni_patterns = {}
" endif
" let g:neocomplcache_force_overwrite_completefunc = 1
" let g:neocomplcache_force_omni_patterns.c =
" 			\ '[^.[:digit:] *\t]\%(\.\|->\)'
" let g:neocomplcache_force_omni_patterns.cpp =
" 			\ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
" let g:neocomplcache_force_omni_patterns.objc =
" 			\ '[^.[:digit:] *\t]\%(\.\|->\)'
" let g:neocomplcache_force_omni_patterns.objcpp =
" 			\ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
" let g:neocomplcache_enable_at_startup = 1
" let g:neocomplcache_enable_smart_case = 1
" let g:neocomplcache_enable_camel_case_completion = 0
" let g:neocomplcache_enable_underbar_completion = 1
" let g:neocomplcache_min_syntax_length = 3
" let g:neocomplcache_enable_auto_select = 0
" " for neocomplcache and clang_complete settings
" let g:neocomplcache_force_overwrite_completefunc = 1
" if !exists("g:neocomplcache_force_omni_patterns")
" 	let g:neocomplcache_force_omni_patterns = {}
" endif
" let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|::'

let g:clang_complete_auto = 0
let g:clang_complete_select = 0
let g:clang_use_library = 1

if has("unix")
	let s:uname = system("uname")
    if s:uname == "Darwin\n"
    elseif s:uname == "Linux\n"
        " Plugin key-mappings.
        " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
        imap <C-k>     <Plug>(neosnippet_expand_or_jump)
        smap <C-k>     <Plug>(neosnippet_expand_or_jump)
        xmap <C-k>     <Plug>(neosnippet_expand_target)

        " SuperTab like snippets behavior.
        " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
        "imap <expr><TAB>
        " \ pumvisible() ? "\<C-n>" :
        " \ neosnippet#expandable_or_jumpable() ?
        " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
        smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
                    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

        " For conceal markers.
        if has('conceal')
            set conceallevel=2 concealcursor=niv
        endif
    endif
endif


" vim-lsp setting{{{
" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/vim-lsp.log')
let g:lsp_log_file = ''
call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd-6.0']},
            \ 'whitelist': ['c', 'cpp'],
            \ })
" clangdのコマンド名を入れつ必要がある
" 以下のコマンドでインストールされる??
" sudo apt install clang-tools

let g:asyncomplete_auto_popup = 0
let g:asyncomplete_auto_completeopt = 0

augroup cpp_lsp_omnifunc
    autocmd!
    autocmd FileType cpp setlocal omnifunc=lsp#complete
augroup END

" vim-lsp-swift setting
if executable('sourcekit-lsp')
    augroup swift_lsp_omnifunc
        autocmd!
        autocmd FileType swift setlocal omnifunc=lsp#complete
    augroup END
endif

"}}}

" SQLUTILITIES
let g:sqlutil_load_default_maps = 0

" previm
" TODO 環境によってブラウザをかえる必要がある
let g:previm_open_cmd = 'open -a "Google Chrome"'

" memolist
let g:memolist_memo_suffix = 'md'
let g:memolist_path = '~/Dropbox/Documents/memo/posts'
let g:memolist_templete_dir_path = '~/Dropbox/Documents/memo'

command! -nargs=* MemoListTitleSearch call <SID>MemoListTitleSearch()
function! s:MemoListTitleSearch()
    execute ":CtrlP " . g:memolist_path
endfunction

" vim-altr
nnoremap <Leader>a <Plug>(alter-forward)

" termdebug{{{
packadd termdebug
let g:termdebug_wide = 200

" augroup ujihisa-vimrc
"   autocmd TerminalOpen * call s:terminalopen_termdebug()
" augroup END
" 
" " Make `TermdebugCommand /home/ujihisa/git/vim/local/bin/vim -u NONE --noplugin` handy, even with the previous tnoremap
" function! s:terminalopen_termdebug() abort
"   if bufname('%') =~# '^debugged program'
"     tnoremap <buffer> <Esc> <Esc>
"   endif
" endfunction

"}}}

" php {{{
let php_sql_query = 1
let php_baselib = 1
let php_htmlInStrings = 1
let php_noShortTags = 1
let php_parent_error_close = 1
" }}}

" html5 {{{
"let g:html5_event_handler_attributes_complete = 1
"let g:html5_rdfa_attributes_complete = 1
"let g:html5_microdata_attributes_complete = 1
"let g:html5_aria_attributes_complete = 1
" }}}

" vim-over {{{

" launch vim-over
" [s]ubstitute + [l]ine, [f]ile, [m]ethod
nnoremap <silent> <Leader>sl :OverCommandLine<CR>s/
nnoremap <silent> <Leader>sf :OverCommandLine<CR>%s/
nnoremap <silent> <Leader>sm V[mo]M:OverCommandLine<CR>s/

" replace word under cursor
nnoremap <silent> <Leader>g :OverCommandLine<CR>%s/\<<C-r><C-w>\>//g<Left><Left>
"vnoremap <silent> <Leader>g y:OverCommandLine<CR>%s/<C-r>"//g<Left><Left>
vnoremap <silent> <Leader>g :OverCommandLine<CR>s//g<Left><Left>

" }}}

" for javacomplete {{{
"augroup vimrc-javacomplete
"    autocmd!
"    autocmd FileType java :setlocal omnifunc=javacomplete#Complete
"    autocmd FileType java :setlocal completefunc=javacomplete#CompleteParamsInfo
"augroup END "}}}

" for java-api-complete {{{
augroup java-api-complete
    autocmd!
    autocmd FileType java :setlocal omnifunc=javacomplete#Complete
augroup END
let g:javaapi#delay_dirs = [
  \ 'java-api-javax',
  \ 'java-api-org',
  \ 'java-api-sun',
  \ 'java-api-servlet2.3',
  \ 'java-api-android',
  \ ]

" }}}

" for jcommenter {{{
augroup jcommenter
    autocmd!
    if filereadable(expand('$VIMRUNTIME/macros/jcommenter.vim'))
        autocmd FileType java source $VIMRUNTIME/macros/jcommenter.vim
        autocmd FileType java nnoremap <C-c> :call JCommentWriter()<CR>
    endif
augroup END
" }}}

" unite settings " {{{
"}}}

" evervim {{{
" jnnoremap <silent> <Space>el :<C-u>EvervimNotebookList<CR>
" jnnoremap <silent> <Space>ecr :<C-u>EvervimCreateNote<CR>
" jnnoremap <silent> <Space>es :EvervimSearchByQuery<Space>''<Left>
" }}}

" vim-airline{{{
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_section_a = airline#section#create(['mode','','branch'])
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:Powerline_symbols = 'fancy'
set t_Co=256
let g:airline_theme='papercolor'

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = '㏑'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''

"}}}

" load plugins
if filereadable(expand('$VIMRUNTIME/macros/matchit.vim'))
	source $VIMRUNTIME/macros/matchit.vim
	:let b:match_words = "if:endif"
endif

" TOhtml options
let html_no_pre = 1
let html_use_css = 1
let html_number_lines = 0
command! -nargs=0 Ehtml call <SID>Ehtml()
function! s:Ehtml()
	let a:myscheme = g:colors_name
	colorscheme default
	TOhtml
	execute "colorscheme " . a:myscheme
endfunction "Ehtml()


" Show all mapping in Unite.
command! -nargs=* ShowAllMappingInUnite call <SID>ShowAllMappingInUnite()
function! s:ShowAllMappingInUnite()
	exec ":Unite output:map|map!|lmap"
endfunction!

" }}}

" Unite Sources {{{

" Unite Source iosframeworks {{{
let g:unite_source_iosframeworks_frameworks_path =
			\"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/System/Library/Frameworks"

let s:unite_source = {
			\'name':'iosframeworks',
			\}
let s:unite_source.hooks = {}

function! s:unite_source.hooks.on_init(args, context)
	let framework_path = g:unite_source_iosframeworks_frameworks_path . "/*/Headers/*.h"
	let filelist = glob(framework_path)
	let a:context.source__lines = split(filelist, "\n")
endfunction

function! s:unite_source.gather_candidates(args, context)
	return map(a:context.source__lines, '{"word" : fnamemodify(v:val, ":t"),
										\ "kind" : "jump_list",
										\ "action__path" : v:val ,
										\ "action__line" : 0 }')
endfunction

call unite#define_source(s:unite_source)

unlet s:unite_source
" }}}

" Unite Source androidSources "{{{
let g:unite_source_androidsources_src_path = ""

let s:unite_source = {
			\'name':'androidSources',
			\}
let s:unite_source.hooks = {}

function! s:unite_source.hooks.on_init(args, context)
	if g:unite_source_androidsources_src_path == ""
		let g:unite_source_androidsources_src_path = "/tmp"
	endif
	let src_path = g:unite_source_androidsources_src_path . "/**/*.java"
	let filelist = glob(src_path)
	let a:context.source__lines = split(filelist, "\n")
endfunction

function! s:unite_source.gather_candidates(args, context)
	return map(a:context.source__lines, '{"word" : fnamemodify(v:val, ":t"),
										\ "kind" : "jump_list",
										\ "action__path" : v:val ,
										\ "action__line" : 0 }')
endfunction

call unite#define_source(s:unite_source)

unlet s:unite_source
"}}}

" Unite Source eclipseSrcFiles" {{{
let g:unite_source_eclipsesrcfiles_src_path = ""

let s:unite_source = {
            \ 'name' : 'eclipseSrcFiles',
            \}
let s:unite_source.hooks = {}

function! s:unite_source.hooks.on_init(args, context)
    " Search .project contain folder
    let src_folder = 'src'
    let srcdir = finddir(src_folder, './')
    echo "srcdir [" +  &srcdir + "]"
    if srcdir == ''
        let srcdir = finddir(src_folder, './;')
    endif

    " Search Java sources
    if srcdir != ''
        let src_path = srcdir . "/**/*.java"
        let filelist = glob(src_path)
        let a:context.source__lines = split(filelist, "\n")
    endif
endfunction

function! s:unite_source.gather_candidates(args, context)
    return map(a:context.source__lines, '{"word" : fnamemodify(v:val, ":t"),
                                        \ "kind" : "jump_list",
                                        \ "action__path" : v:val ,
                                        \ "action__line" : 0 }')
endfunction

call unite#define_source(s:unite_source)

unlet s:unite_source
"}}}

" Unite Source cocoaSrcFiles" {{{
let g:unite_source_cocoasecfiles_src_path = ""

let s:unite_source = {
            \ 'name' : 'cocoaSrcFiles',
            \}
let s:unite_source.hooks = {}

function! s:unite_source.hooks.on_init(args, context)
    " Search .project contain folder
    let currentPath = <SID>XCodeProjectDir()

    " Search cocoa sources
    if currentPath != ''
        let src_path = "\"`find \"" . currentPath . "\" -name \"*.m\" -o -name \"*.h\" -o -name \"*.mm\"`\""
        let filelist = glob(src_path)
        let a:context.source__lines = split(filelist, "\n")
    endif
endfunction

function! s:unite_source.gather_candidates(args, context)
    return map(a:context.source__lines, '{"word" : fnamemodify(v:val, ":t"),
                                        \ "kind" : "jump_list",
                                        \ "action__path" : v:val ,
                                        \ "action__line" : 0 }')
endfunction

call unite#define_source(s:unite_source)

unlet s:unite_source
"}}}

" Unite Source cppSrcFiles" {{{

let g:unite_source_cppfiles_src_path = ""

let s:unite_source = {
            \ 'name' : 'cppSrcFiles',
            \}
let s:unite_source.hooks = {}

function! s:unite_source.hooks.on_init(args, context)
    " Search .project contain folder
    let tags_file = '.tags'
    let srcdir = findfile(tags_file, './')

    let src_folder = 'src'
    if srcdir == ''
        let srcdir = finddir(src_folder, './')
    endif
    if srcdir == ''
        let srcdir = finddir(src_folder, './;')
    endif

    " Search cpp sources
    if srcdir != ''
        let src_path = "\"`find \"" . srcdir . "\" -name \"*.cpp\" -o -name \"*.c\" -o -name \"*.hpp\" -o -name \"*.h\" -o -name \"*.cc\"`\""
        let filelist = glob(src_path)
        let a:context.source__lines = split(filelist, "\n")
    endif
endfunction

function! s:unite_source.gather_candidates(args, context)
    return map(a:context.source__lines, '{"word" : fnamemodify(v:val, ":t"),
                                        \ "kind" : "jump_list",
                                        \ "action__path" : v:val ,
                                        \ "action__line" : 0 }')
endfunction

call unite#define_source(s:unite_source)

unlet s:unite_source
"}}}


" Unite Source change_link_directory" {{{
let g:unite_source_link_directory_path = "$HOME/link"

let s:unite_source = {
            \ 'name' : 'change_link_directory',
            \}
let s:unite_source.hooks = {}

function! s:unite_source.hooks.on_init(args, context)
        let src_path = g:unite_source_link_directory_path . "/*"
        let filelist = glob(src_path)
        let a:context.source__lines = split(filelist, "\n")
endfunction

function! s:unite_source.hooks.on_close(args, context)
        " load .localvimrc
        call s:LoadLocalVimrc(expand('%:p:h'))
endfunction

function! s:unite_source.gather_candidates(args, context)
    return map(a:context.source__lines, '{"word" : fnamemodify(v:val, ":t"),
                                        \ "kind" : "cdable",
                                        \ "action__directory" : v:val ,}')
endfunction

call unite#define_source(s:unite_source)
call unite#custom#default_action('source/change_link_directory/cdable' ,'lcd')
call unite#custom#alias('source/change_link_directory/narrow', 'cdable', 'lcd')

unlet s:unite_source
"}}}

" Unite Source Junkfile list "{{{
let g:unite_source_junk_file_src_path = ""

let s:unite_source = {
			\'name':'junkfile_titlesearch',
			\}
let s:unite_source.hooks = {}

function! s:unite_source.hooks.on_init(args, context)
    if g:unite_source_junk_file_src_path == ""
		let g:unite_source_junk_file_src_path = expand('~/.vim_junk')
    endif
    let src_path = g:unite_source_junk_file_src_path . "/**/*.md"
    let filelist = glob(src_path)
    let search_file_list = reverse(split(filelist, "\n"))

    let src_path = g:unite_source_junk_file_src_path . "/**/*.???"
    let filelist = glob(src_path)
    let search_file_list += reverse(split(filelist, "\n"))

    let a:context.source__lines = search_file_list
endfunction

function! s:unite_source.gather_candidates(args, context)
	return map(a:context.source__lines, '{"word" : s:load_file_firstline(v:val),
										\ "kind" : "jump_list",
										\ "action__path" : v:val ,
										\ "action__line" : 0 }')
endfunction

call unite#define_source(s:unite_source)

unlet s:unite_source
"}}}

" Unite Source DailyReport list "{{{
let g:unite_source_daily_report_src_path = ""

let s:unite_source = {
			\'name':'daily_report_title_search',
			\}
let s:unite_source.hooks = {}

function! s:unite_source.hooks.on_init(args, context)
    if g:unite_source_daily_report_src_path == ""
		let g:unite_source_daily_report_src_path = expand('~/.vim_daily')
    endif
    let src_path = g:unite_source_daily_report_src_path . "/**/*.txt"
    let filelist = glob(src_path)
    let a:context.source__lines = reverse(split(filelist, "\n"))
endfunction

function! s:unite_source.gather_candidates(args, context)
	return map(a:context.source__lines, '{"word" : fnamemodify(v:val, ":t"),
										\ "kind" : "jump_list",
										\ "action__path" : v:val ,
										\ "action__line" : 0 }')
endfunction

call unite#define_source(s:unite_source)

unlet s:unite_source
"}}}

" Unite Source Astronomical Observation list "{{{
let g:unite_source_astronomical_observation_src_path= ""

let s:unite_source = {
			\'name':'astronomical_observation_report_search',
			\}
let s:unite_source.hooks = {}

function! s:unite_source.hooks.on_init(args, context)
    if g:unite_source_astronomical_observation_src_path == ""
		let g:unite_source_astronomical_observation_src_path = expand('~/.vim_astronomical_observation')
    endif
    let src_path = g:unite_source_astronomical_observation_src_path . "/**/*.txt"
    let filelist = glob(src_path)
    let a:context.source__lines = reverse(split(filelist, "\n"))
endfunction

function! s:unite_source.gather_candidates(args, context)
	return map(a:context.source__lines, '{"word" : s:load_file_firstline(v:val),
										\ "kind" : "jump_list",
										\ "action__path" : v:val ,
										\ "action__line" : 0 }')
endfunction

call unite#define_source(s:unite_source)

unlet s:unite_source
"}}}

" }}}


